#version 330

layout (std140) uniform LightData
{
	vec4 ambient_light;
	vec4 lights_count;

	mat4 shadow_matrices_lod[4];
	mat4 spotlight_matrices[8];

	vec4 dirlights_dir[2];
	vec4 dirlights_color[2];

	vec4 pointlights_pos[16];
	vec4 pointlights_intensity[16];

	vec4 spotlights_pos[16];
	vec4 spotlights_dir[16];
	vec4 spotlights_intensity[16];
	vec4 spotlights_conedata[16];
};

uniform sampler2D tex0;
uniform mat4 model_matrix;

uniform sampler2D shadow_map;

//Support 8 spot light shadow maps
uniform sampler2D EE_spotlights_shadow_map[8];

out vec4 finalColor;
in vec2 Uv;
in vec3 Color;
in vec3 Normal;
in vec3 Pos;
in vec4 P_Pos;

in vec4 shadow_lightspace_pos_lod1;
in vec4 shadow_lightspace_pos_lod2;
in vec4 shadow_lightspace_pos_lod3;
in vec4 shadow_lightspace_pos_lod4;
in vec4 EE_spotlights_lightspace_pos[8];

vec3 EE_dirlight_color(int index, vec3 normal)
{
	vec3 p = -dirlights_dir[index].xyz;
	vec3 n = normal;

	return (dirlights_color[index].xyz * max(dot(n,p), 0.0f));
}

vec3 EE_pointlight_color(int index, vec3 normal, vec3 pos)
{
	vec3 p = pointlights_pos[index].xyz-pos;
	vec3 n = normal;
	float d = distance(pointlights_pos[index].xyz,pos);
	float att = pointlights_intensity[index].w / (1.0f + 0.1f*d + 0.01f*(d*d));

	return (pointlights_intensity[index].xyz * clamp((dot(n,p) / (length(p) * length(n))), 0, 1)) * att;
}

vec3 EE_spotlight_color(int index, vec3 normal, vec3 pos)
{
	vec3 p = spotlights_pos[index].xyz-pos;
	vec3 n = normal;
	float d = distance(spotlights_pos[index].xyz,pos);
	float att = clamp((spotlights_intensity[index].w / (1.0f + 0.1f*d + 0.01f*(d*d))), 0.0f, 2.0f);

	float inner_cutoff = spotlights_conedata[index].x;
	float outer_cutoff = spotlights_conedata[index].x - spotlights_conedata[index].y;
	float cos_angle = dot(normalize(-spotlights_dir[index].xyz), normalize(p));

	float falloff = clamp((cos_angle - outer_cutoff) / (inner_cutoff-outer_cutoff), 0.0f, 1.0f);
	return (spotlights_intensity[index].xyz * clamp((dot(n,p) / (length(p) * length(n))), 0, 1)) * falloff * att;
}

/*
	Each shadow map is split into 4 parts where each part is a lod
*/
float sample_dirlight_shadow(int index, vec4 l_pos, sampler2D map, float filter_steps, vec2 uv_offset)
{
	vec4 lightspace_pos = l_pos;
	vec3 pcoords = lightspace_pos.xyz / lightspace_pos.w;

	float a = 1.0f / 2048.0f;
	pcoords.x = floor(pcoords.x*2048)*a;
	pcoords.y = floor(pcoords.y*2048)*a;

	vec2 uvc;
	uvc.x = 0.25f * pcoords.x + 0.25f + uv_offset.x;
	uvc.y = 0.25f * pcoords.y + 0.25f + uv_offset.y;
	float z = 0.5f * pcoords.z + 0.5f;

	vec3 p = -dirlights_dir[index].xyz;
	vec3 n = Normal;

	//PCF + Linear interp
	float res = 0.0f;

	filter_steps *= 1.0f - float(int(z));
	for(float x = -filter_steps; x <= filter_steps; ++x)
	{
		for(float y = -filter_steps; y <= filter_steps; ++y)
		{
			vec2 off = vec2(x,y)*vec2(a,a);
			float depth = texture(map, uvc+off).r;
			if(depth < z)
			{
				res += 1.0f;
			}
		}
	}
	
	res /= (filter_steps+filter_steps)*(filter_steps+filter_steps);
	res = clamp(res, 0.0f, 0.25f);

	return res;
}

void main()
{
	vec3 fpos = vec3(model_matrix * vec4(Pos,1));

	vec3 mixed = ambient_light.xyz * Color;
	for(int i = 0; i < lights_count.x; ++i)
	{
		mixed = max(mixed,EE_dirlight_color(i, Normal));
	}

	for(int i = 0; i < lights_count.y; ++i)
	{
		mixed = max(mixed,EE_pointlight_color(i, Normal, fpos));
	}

	for(int i = 0; i < lights_count.z; ++i)
	{
		mixed = max(mixed,EE_spotlight_color(i, Normal, fpos));
	}

	/*
		Frustum splits are chosen depending on the bounds of a sphere as our frustum splits are fit inside a sphere and not a box.
		Sphere eq = x^2+y^2+z^2 = r^2
	*/
	float light_factor = 0.0f;
	float P_Pos_sqr = (P_Pos.x*P_Pos.x)+(P_Pos.y*P_Pos.y)+(P_Pos.z*P_Pos.z);

	float asd = clamp(P_Pos_sqr, 0.0f, 4096.0f);
	int ind = clamp(int(step(asd,16) + step(asd,32) + step(asd,64)), 0, 3);

	vec4 dirlight_lsp[4]; 
	dirlight_lsp[0] = shadow_lightspace_pos_lod4;
	dirlight_lsp[1] = shadow_lightspace_pos_lod3;
	dirlight_lsp[2] = shadow_lightspace_pos_lod2;
	dirlight_lsp[3] = shadow_lightspace_pos_lod1;

	vec2 cascade_offsets[4];
	cascade_offsets[0] = vec2(0.5,0.5);
	cascade_offsets[1] = vec2(0.0,0.5);
	cascade_offsets[2] = vec2(0.5,0.0);
	cascade_offsets[3] = vec2(0.0,0.0);

	light_factor += sample_dirlight_shadow(0, dirlight_lsp[ind], shadow_map, 1, cascade_offsets[ind]);

	for(int i = 0; i < lights_count.z; ++i)
	{
		vec4 lightspace_pos = EE_spotlights_lightspace_pos[i];
		vec3 pcoords = lightspace_pos.xyz / lightspace_pos.w;
		vec2 uvc;
		uvc.x = 0.5f * pcoords.x + 0.5f;
		uvc.y = 0.5f * pcoords.y + 0.5f;
		float z = (pcoords.z + 1.0f) + 1.0f;

		vec3 p = spotlights_pos[i].xyz-fpos;
		vec3 n = normalize(Normal);
		float d = distance(spotlights_pos[i].xyz,fpos);
		float att = (spotlights_intensity[i].w*0.25f / (1.0f + 0.1f*d + 0.01f*(d*d)));

		float inner_cutoff = spotlights_conedata[i].x;
		float outer_cutoff = spotlights_conedata[i].x - spotlights_conedata[i].y;
		float cos_angle = dot(normalize(-spotlights_dir[i].xyz), normalize(p));

		float falloff = clamp((cos_angle - outer_cutoff) / (inner_cutoff-outer_cutoff), 0.0f, 1.0f);
		float intensity = clamp((dot(n,p) / (length(p) * length(n))), 0, 1);

		z = clamp(z, 0.0f, 1.0f);

		//PCF + Linear interp
		float res = 0.0f;
		for(int x = -1; x <= 1; ++x)
		{
			for(int y = -1; y <= 1; ++y)
			{
				vec2 off = vec2(x,y) / vec2(1024,1024);
				/*float depth = texture(EE_spotlights_shadow_map[i], uvc+off).r;

				if(depth < (z + 0.00005f) && z <= 0.99f)
				{
					res += intensity*falloff;
				}*/
			}
		}

		res /= 9.0f;
		light_factor += res;
	}
	
vec4 color[4];
color[0] = vec4(1,0,0,1);
color[1] = vec4(0,1,0,1);
color[2] = vec4(0,0,1,1);
color[3] = vec4(1,1,0,1);
	finalColor = texture(tex0, Uv) * vec4(mixed,1.0f) * (1-light_factor);// * color[ind];
}

